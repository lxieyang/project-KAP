.InteractionBox {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 14px;
  line-height: 1.2rem;
  max-width: 900px;
  /* min-width: 550px; */
  background-color: rgba(226, 236, 244, 1);
  box-shadow: 0 4px 10px 0 rgba(0,0,0,0.2), 0 4px 20px 0 #00000030;
  display: flex;
  flex-flow: column;
  width: 100%;
  word-break: break-all;
  padding: 15px 20px;
  box-sizing: border-box;
  position: relative;
  opacity: 1;
  position: relative;
}

.InteractionBoxDragHandle {
  position: absolute;
  top: 1px;
  left: 4px;
  font-size: 10px;
  cursor: move;
}

.CloseBoxContainer {
  position: absolute;
  top: 2px;
  right: 5px;
  font-size: 12px;
  cursor: pointer;
}

.TitleInput {
  border: 0px solid transparent !important;
  width: 70%;
  text-overflow: ellipsis;
  font-size: 16px;
  background-color: transparent !important;
  box-shadow: none !important;
  text-align: left;
  padding: 2px 2px;
  border-bottom: 1px dashed lightgray !important;
  color: rgba(0,0,0,.87);
  
}

.TitleInput:focus {
  outline: none;
}

.AutoSuggestedBadge {
  background-color: #f0ad4e;
  display: inline;
  padding: 1px 6px;
  font-size: 11px;
  border-radius: 4px;
  font-weight: 500;
  color: #fff;
  text-align: center;
  white-space: nowrap;
  cursor: default;
}

.selectedText {
  flex: 1;
  margin-right: 20px;
  font-size: 16px;
  border-left: 6px solid #ccc !important;
  background-color: #f1f1f1 !important;
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.16),0 1px 5px 0 rgba(0,0,0,0.12);
  padding: 10px;
  max-height: 300px;
  overflow-x: auto;
  overflow-y: auto;
}

.snappedText {
  flex: 1;
  margin-right: 20px;
  font-size: 15px;
  border-left: 6px solid #ccc !important;
  background-color: white;
  box-shadow: 0 1px 2px 0 rgba(0,0,0,0.16),0 1px 5px 0 rgba(0,0,0,0.12);
  padding: 10px;
  max-height: 300px;
  overflow-x: auto;
  overflow-y: auto;
}

::selection {
  background-color: rgb(180, 215, 252);
}

.selectedText:focus,
.snappedText:focus {
  outline: none;
  box-shadow: none;
}

.Inactive {
  opacity: 0.3;
  filter: grayscale(100%);
  transition: all 0.1 ease-in;
}

.Active {
  opacity: 1.0;
  filter: grayscale(0%);
}

button:hover {
  cursor: pointer;
}
/* 
.OptionList ul li {
  margin: 10px 0px;
} */

.AddOptionRowContainer {
  margin-top: 8px;
  padding: 0px 4px;
  padding-right: 20px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.AddSomthingInputContainer {
  width: 45%;
}

.AddOptionRowContainer input {
  font-size: 16px;
  border-radius: 5px;
  border: 1px solid lightgray;
  padding: 3px 6px;
  width: 60%;

}

.AddOptionRowContainer input:focus {
  outline: purple;
}

.AddSomethingButton {
  display: inline-block;
  box-sizing: border-box;
  border-radius: 5px;
  border: 1px solid #28a745;
  background-color: #28a745;
  color: white;
  padding: 2px 8px;
  opacity: 0.8;
  transition: all 0.1s ease-in;
  cursor: pointer;
}


.AddSomethingButton:hover {
  opacity: 1;
}


.Interactions {
  display: flex;
}

.InteractionBox h3 {
  font-size: 16px;
  font-weight: normal;
}

/* .InteractionBox ul {
  cursor: text;
  margin: 0;
  padding: 0px 10px;
  list-style-type: none;
}

.InteractionBox ul li {
  text-transform: capitalize;
} */





.OptionList {
  margin: 10px 0px;
  padding-top: 10px;
  width: 100%;
  max-height: 250px;
  overflow: auto;
}

.Table {
  border-collapse: collapse;
  border: none;
}

.Table td, 
.Table th {
  
  padding: 0px 4px;
  vertical-align: middle;
}

.OptionTableRow {
  /* height: 100%; */
  border-bottom: 1px solid #ddd;
}

.TableTitle {
  font-size: 18px;
  font-weight: 600;
  /* text-align: center; */
  width: 100%;
}

.DeleteOptionIconContainer {
  font-size: 14px;
  height: 100%;
  cursor: pointer;
  opacity: 0.3;
  margin-right: 5px;
  transition: all 0.1s ease-in;
}

.DeleteOptionIconContainer:hover {
  transform: scale(1.05);
  opacity: 1;
}

.OptionRowContainer {
  display: flex;
  align-items: center;
  height: 100%;
  min-width: 150px;
  max-width: 250px;
  
}

.Option {
  color: white;
  font-size: 16px;
  font-weight: 300;
  font-family: 'Encode Sans Semi Expanded', sans-serif;
  background-color: #4e89bc;
  padding: 3px 6px;
  border-radius: 5px;
  text-align: left;
  cursor: default;
  white-space: pre-wrap;
  word-break: keep-all;
  box-sizing: border-box;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.16), 0 1px 5px 0 rgba(0,0,0,0.12);
}

.AttitudeThumbContainer {
  width: 25px;
  height: 25px;
  margin: 0px 0px;
  cursor: pointer;
}

.InTermsOf {
  text-align: center;
  word-wrap: none;
  margin: 0px 0px;
  font-size: 16px;
  min-width: 30px;
}

.RequirementsContainer {
  display: flex;
  flex-wrap: wrap;
}

.Requirement {
  flex: 1 0 auto;
  flex-shrink: none;
  display: flex;
  align-items: center;
  margin: 10px 12px;

  align-self: center;
  max-width: 100px;
  white-space: pre-wrap;
  word-break: keep-all;
  cursor: default;
  font-size: 12px;
  color: white;
  font-weight: 300;
  font-family: 'Encode Sans Semi Expanded', sans-serif;
  background-color: #81cae0;
  padding: 1px 6px;
  border-radius: 4px;
  box-sizing: border-box;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.16), 0 1px 5px 0 rgba(0,0,0,0.12);
  
  position: relative;
  /* transition: all 0.05s ease-in; */
}

.InactiveRequirement {
  color: rgb(121, 121, 121);
  background-color: rgb(223, 221, 221);
  
}

.RequirementName {
  
}

.RequirementAttitudeContainer {
  margin: 8px 0px;
}

.RequirementAttitudeThumbContainer {
  width: 15px;
  height: 15px;
  margin: 0px 0px;
  cursor: pointer;
  opacity: 0.10;
  filter: grayscale(100%);
  transition: all 0.1s ease-in;
}

.RequirementAttitudeThumbContainer:hover {
  transform: scale(1.05);
  filter: grayscale(0%);
  opacity: 1;
}

.RequirementAttitude {
  position: absolute;
  top: -6px;
  right: -6px;

  width: 20px;
  height: 20px;
  margin: 0px 0px;
}

.RequirementStar {
  position: absolute;
  top: -8px;
  left: -8px;
  font-size: 14px;
  color: rgb(255, 232,90);
  transition: all 0.1s ease-in;
  opacity: 0;
  cursor: default;
}

/* .RequirementStar:hover {
  opacity: 0.8;
  transform: scale(1.1);
} */

.ActiveStar {
  opacity: 1;
}







/* The container - active */
.ExperimentalCheckboxContainer {
  display: flex;
  align-items: center;
  position: relative;
  cursor: pointer;
  font-size: 18px;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/* Hide the browser's default checkbox */
.ExperimentalCheckboxContainer input {
  position: absolute;
  transform: scale(2);
  opacity: 0;
  cursor: pointer;
}

.ExperimentalCheckboxCheckmarkContainer {
  flex-shrink: 0;
  height: 23px;
  width: 23px;
  position: relative;
  margin-right: 10px;
}

/* Create a custom checkbox */
.ExperimentalCheckboxCheckmark {
  /* flex-shrink: 0; */
  height: 100%;
  width: 100%;
  font-size: 18px;
  /* margin-right: 10px; */
  background-color: #eee;
  border-radius: 5px;
  transition: all 0.1s ease-in;
}

/* On mouse-over, add a grey background color */
.ExperimentalCheckboxContainer:hover input ~ .ExperimentalCheckboxCheckmark {
  background-color: #ccc;
}

/* When the checkbox is checked, add a blue background */
.ExperimentalCheckboxContainer input:checked ~ .ExperimentalCheckboxCheckmark {
  background-color: #2196F3;
}

/* Create the checkmark/indicator (hidden when not checked) */
.ExperimentalCheckboxCheckmark:after {
  content: "";
  /* position: absolute; */
  display: none;
}

/* Show the checkmark when checked */
.ExperimentalCheckboxContainer input:checked ~ .ExperimentalCheckboxCheckmark:after {
  display: block;
}

/* Style the checkmark/indicator */
.ExperimentalCheckboxContainer .ExperimentalCheckboxCheckmark:after {
  position: absolute;
  left: 7px;
  top: 2px;
  width: 8px;
  height: 16px;
  box-sizing: border-box;
  border: solid white;
  border-width: 0 4px 4px 0;
  transform: rotate(40deg);
}





.FooterContainer {
  margin-top: 10px;
  width: 100%;
  display: flex;
}

.NoteContainer {
  width: 80%;
  font-size: 16px;
}






/* Clip button */
.ClipButtonContainer {
  width: 20%;
  display: flex;
  align-items: flex-end;
  justify-content: flex-end;
  padding-right: 5px;
  padding-bottom: 8px;
}

.ClipButton:focus,
.ClipButton {
  cursor: pointer;
  width: 90px;
  height: 50px;
  background: rgb(236, 236, 236);
  color: gray;
  border: none;
  outline: none;
  border-radius: 3px;
  position: relative;
  box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2), 0 2px 10px 0 #00000030;
}

.ClipButton.active{
  background: rgb(236, 236, 236);
  color: white;
  border: none;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.10), 0 1px 3px 0 rgba(0,0,0,0.06);
}

.ClipButton:hover {
  background: rgb(236, 236, 236);
  color: gray;
  border: none;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.10), 0 1px 3px 0 rgba(0,0,0,0.06);
}

.ClipButtonIcon {
}

.ButtonTextContainer {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

.ButtonText {
  font-size: 26px;
}

.CheckmarkContainer {
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: space-around;
}

.Checkmark {
  display: block;
  opacity: 0;
}

.Checkmark:after{
  /*Add another block-level blank space*/
  content: '';
  display: block;
  box-sizing: border-box;

  /*Make it a small rectangle so the border will create an L-shape*/
  width: 14px;
  height: 22px;

  /*Add a white border on the bottom and left, creating that 'L' */
  border: solid #000;
  border-width: 0 6px 6px 0;
  border-color: rgb(0, 200, 0);

  /*Rotate the L 45 degrees to turn it into a checkmark*/
  transform: rotate(45deg);
}

.CheckmarkSpin {
  animation-name: SpinOneRound;
  animation-duration: 0.3s;
  animation-iteration-count: 1;
  animation-timing-function: linear;
  animation-fill-mode: forwards;
}

@keyframes SpinOneRound {
  0% {
    opacity: 0;
    transform: rotate(0deg);
  }
  20% {
    opacity: 0.1;
    transform: rotate(10deg);
  }
  25% {
    opacity: 0.2;
    transform: rotate(90deg);
  }
  50% {
    opacity: 0.5;
    transform: rotate(270deg);
  }
  100% {
    opacity: 1;
    transform: rotate(720deg);
  }
}

.ButtonTextDisappear {
  animation-name: DisappearOneRound;
  animation-duration: 0.3s;
  animation-iteration-count: 1;
  animation-timing-function: linear;
  animation-fill-mode: forwards;
}

@keyframes DisappearOneRound {
  0% {
    opacity: 1;
  }
  20% {
    opacity: 0.5;
  }
  25% {
    opacity: 0.2;
  }
  50% {
    opacity: 0.1;
  }
  100% {
    opacity: 0;
  }
}